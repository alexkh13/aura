/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WardrobeRouteImport } from './routes/wardrobe'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as OutfitsRouteImport } from './routes/outfits'
import { Route as NotificationsRouteImport } from './routes/notifications'
import { Route as DiscoverRouteImport } from './routes/discover'
import { Route as CalendarRouteImport } from './routes/calendar'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TrendsIndexRouteImport } from './routes/trends/index'
import { Route as SettingsIndexRouteImport } from './routes/settings/index'
import { Route as OutfitsIndexRouteImport } from './routes/outfits/index'
import { Route as TrendsTrendIdRouteImport } from './routes/trends/$trendId'
import { Route as SettingsPrivacyRouteImport } from './routes/settings/privacy'
import { Route as SettingsNotificationsRouteImport } from './routes/settings/notifications'
import { Route as SettingsDataRouteImport } from './routes/settings/data'
import { Route as SettingsAboutRouteImport } from './routes/settings/about'
import { Route as ProfilesNewRouteImport } from './routes/profiles/new'
import { Route as OutfitsNewRouteImport } from './routes/outfits/new'
import { Route as OutfitsOutfitIdRouteImport } from './routes/outfits/$outfitId'
import { Route as ItemsNewRouteImport } from './routes/items/new'
import { Route as ItemsItemIdRouteImport } from './routes/items/$itemId'
import { Route as GuidesGuideIdRouteImport } from './routes/guides/$guideId'
import { Route as ArticlesArticleIdRouteImport } from './routes/articles/$articleId'
import { Route as OutfitsOutfitIdEditRouteImport } from './routes/outfits/$outfitId_.edit'

const WardrobeRoute = WardrobeRouteImport.update({
  id: '/wardrobe',
  path: '/wardrobe',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const OutfitsRoute = OutfitsRouteImport.update({
  id: '/outfits',
  path: '/outfits',
  getParentRoute: () => rootRouteImport,
} as any)
const NotificationsRoute = NotificationsRouteImport.update({
  id: '/notifications',
  path: '/notifications',
  getParentRoute: () => rootRouteImport,
} as any)
const DiscoverRoute = DiscoverRouteImport.update({
  id: '/discover',
  path: '/discover',
  getParentRoute: () => rootRouteImport,
} as any)
const CalendarRoute = CalendarRouteImport.update({
  id: '/calendar',
  path: '/calendar',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TrendsIndexRoute = TrendsIndexRouteImport.update({
  id: '/trends/',
  path: '/trends/',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsIndexRoute = SettingsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SettingsRoute,
} as any)
const OutfitsIndexRoute = OutfitsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => OutfitsRoute,
} as any)
const TrendsTrendIdRoute = TrendsTrendIdRouteImport.update({
  id: '/trends/$trendId',
  path: '/trends/$trendId',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsPrivacyRoute = SettingsPrivacyRouteImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => SettingsRoute,
} as any)
const SettingsNotificationsRoute = SettingsNotificationsRouteImport.update({
  id: '/notifications',
  path: '/notifications',
  getParentRoute: () => SettingsRoute,
} as any)
const SettingsDataRoute = SettingsDataRouteImport.update({
  id: '/data',
  path: '/data',
  getParentRoute: () => SettingsRoute,
} as any)
const SettingsAboutRoute = SettingsAboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => SettingsRoute,
} as any)
const ProfilesNewRoute = ProfilesNewRouteImport.update({
  id: '/profiles/new',
  path: '/profiles/new',
  getParentRoute: () => rootRouteImport,
} as any)
const OutfitsNewRoute = OutfitsNewRouteImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => OutfitsRoute,
} as any)
const OutfitsOutfitIdRoute = OutfitsOutfitIdRouteImport.update({
  id: '/$outfitId',
  path: '/$outfitId',
  getParentRoute: () => OutfitsRoute,
} as any)
const ItemsNewRoute = ItemsNewRouteImport.update({
  id: '/items/new',
  path: '/items/new',
  getParentRoute: () => rootRouteImport,
} as any)
const ItemsItemIdRoute = ItemsItemIdRouteImport.update({
  id: '/items/$itemId',
  path: '/items/$itemId',
  getParentRoute: () => rootRouteImport,
} as any)
const GuidesGuideIdRoute = GuidesGuideIdRouteImport.update({
  id: '/guides/$guideId',
  path: '/guides/$guideId',
  getParentRoute: () => rootRouteImport,
} as any)
const ArticlesArticleIdRoute = ArticlesArticleIdRouteImport.update({
  id: '/articles/$articleId',
  path: '/articles/$articleId',
  getParentRoute: () => rootRouteImport,
} as any)
const OutfitsOutfitIdEditRoute = OutfitsOutfitIdEditRouteImport.update({
  id: '/$outfitId_/edit',
  path: '/$outfitId/edit',
  getParentRoute: () => OutfitsRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/calendar': typeof CalendarRoute
  '/discover': typeof DiscoverRoute
  '/notifications': typeof NotificationsRoute
  '/outfits': typeof OutfitsRouteWithChildren
  '/profile': typeof ProfileRoute
  '/settings': typeof SettingsRouteWithChildren
  '/wardrobe': typeof WardrobeRoute
  '/articles/$articleId': typeof ArticlesArticleIdRoute
  '/guides/$guideId': typeof GuidesGuideIdRoute
  '/items/$itemId': typeof ItemsItemIdRoute
  '/items/new': typeof ItemsNewRoute
  '/outfits/$outfitId': typeof OutfitsOutfitIdRoute
  '/outfits/new': typeof OutfitsNewRoute
  '/profiles/new': typeof ProfilesNewRoute
  '/settings/about': typeof SettingsAboutRoute
  '/settings/data': typeof SettingsDataRoute
  '/settings/notifications': typeof SettingsNotificationsRoute
  '/settings/privacy': typeof SettingsPrivacyRoute
  '/trends/$trendId': typeof TrendsTrendIdRoute
  '/outfits/': typeof OutfitsIndexRoute
  '/settings/': typeof SettingsIndexRoute
  '/trends': typeof TrendsIndexRoute
  '/outfits/$outfitId/edit': typeof OutfitsOutfitIdEditRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/calendar': typeof CalendarRoute
  '/discover': typeof DiscoverRoute
  '/notifications': typeof NotificationsRoute
  '/profile': typeof ProfileRoute
  '/wardrobe': typeof WardrobeRoute
  '/articles/$articleId': typeof ArticlesArticleIdRoute
  '/guides/$guideId': typeof GuidesGuideIdRoute
  '/items/$itemId': typeof ItemsItemIdRoute
  '/items/new': typeof ItemsNewRoute
  '/outfits/$outfitId': typeof OutfitsOutfitIdRoute
  '/outfits/new': typeof OutfitsNewRoute
  '/profiles/new': typeof ProfilesNewRoute
  '/settings/about': typeof SettingsAboutRoute
  '/settings/data': typeof SettingsDataRoute
  '/settings/notifications': typeof SettingsNotificationsRoute
  '/settings/privacy': typeof SettingsPrivacyRoute
  '/trends/$trendId': typeof TrendsTrendIdRoute
  '/outfits': typeof OutfitsIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/trends': typeof TrendsIndexRoute
  '/outfits/$outfitId/edit': typeof OutfitsOutfitIdEditRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/calendar': typeof CalendarRoute
  '/discover': typeof DiscoverRoute
  '/notifications': typeof NotificationsRoute
  '/outfits': typeof OutfitsRouteWithChildren
  '/profile': typeof ProfileRoute
  '/settings': typeof SettingsRouteWithChildren
  '/wardrobe': typeof WardrobeRoute
  '/articles/$articleId': typeof ArticlesArticleIdRoute
  '/guides/$guideId': typeof GuidesGuideIdRoute
  '/items/$itemId': typeof ItemsItemIdRoute
  '/items/new': typeof ItemsNewRoute
  '/outfits/$outfitId': typeof OutfitsOutfitIdRoute
  '/outfits/new': typeof OutfitsNewRoute
  '/profiles/new': typeof ProfilesNewRoute
  '/settings/about': typeof SettingsAboutRoute
  '/settings/data': typeof SettingsDataRoute
  '/settings/notifications': typeof SettingsNotificationsRoute
  '/settings/privacy': typeof SettingsPrivacyRoute
  '/trends/$trendId': typeof TrendsTrendIdRoute
  '/outfits/': typeof OutfitsIndexRoute
  '/settings/': typeof SettingsIndexRoute
  '/trends/': typeof TrendsIndexRoute
  '/outfits/$outfitId_/edit': typeof OutfitsOutfitIdEditRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/calendar'
    | '/discover'
    | '/notifications'
    | '/outfits'
    | '/profile'
    | '/settings'
    | '/wardrobe'
    | '/articles/$articleId'
    | '/guides/$guideId'
    | '/items/$itemId'
    | '/items/new'
    | '/outfits/$outfitId'
    | '/outfits/new'
    | '/profiles/new'
    | '/settings/about'
    | '/settings/data'
    | '/settings/notifications'
    | '/settings/privacy'
    | '/trends/$trendId'
    | '/outfits/'
    | '/settings/'
    | '/trends'
    | '/outfits/$outfitId/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/calendar'
    | '/discover'
    | '/notifications'
    | '/profile'
    | '/wardrobe'
    | '/articles/$articleId'
    | '/guides/$guideId'
    | '/items/$itemId'
    | '/items/new'
    | '/outfits/$outfitId'
    | '/outfits/new'
    | '/profiles/new'
    | '/settings/about'
    | '/settings/data'
    | '/settings/notifications'
    | '/settings/privacy'
    | '/trends/$trendId'
    | '/outfits'
    | '/settings'
    | '/trends'
    | '/outfits/$outfitId/edit'
  id:
    | '__root__'
    | '/'
    | '/calendar'
    | '/discover'
    | '/notifications'
    | '/outfits'
    | '/profile'
    | '/settings'
    | '/wardrobe'
    | '/articles/$articleId'
    | '/guides/$guideId'
    | '/items/$itemId'
    | '/items/new'
    | '/outfits/$outfitId'
    | '/outfits/new'
    | '/profiles/new'
    | '/settings/about'
    | '/settings/data'
    | '/settings/notifications'
    | '/settings/privacy'
    | '/trends/$trendId'
    | '/outfits/'
    | '/settings/'
    | '/trends/'
    | '/outfits/$outfitId_/edit'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CalendarRoute: typeof CalendarRoute
  DiscoverRoute: typeof DiscoverRoute
  NotificationsRoute: typeof NotificationsRoute
  OutfitsRoute: typeof OutfitsRouteWithChildren
  ProfileRoute: typeof ProfileRoute
  SettingsRoute: typeof SettingsRouteWithChildren
  WardrobeRoute: typeof WardrobeRoute
  ArticlesArticleIdRoute: typeof ArticlesArticleIdRoute
  GuidesGuideIdRoute: typeof GuidesGuideIdRoute
  ItemsItemIdRoute: typeof ItemsItemIdRoute
  ItemsNewRoute: typeof ItemsNewRoute
  ProfilesNewRoute: typeof ProfilesNewRoute
  TrendsTrendIdRoute: typeof TrendsTrendIdRoute
  TrendsIndexRoute: typeof TrendsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/wardrobe': {
      id: '/wardrobe'
      path: '/wardrobe'
      fullPath: '/wardrobe'
      preLoaderRoute: typeof WardrobeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/outfits': {
      id: '/outfits'
      path: '/outfits'
      fullPath: '/outfits'
      preLoaderRoute: typeof OutfitsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/notifications': {
      id: '/notifications'
      path: '/notifications'
      fullPath: '/notifications'
      preLoaderRoute: typeof NotificationsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/discover': {
      id: '/discover'
      path: '/discover'
      fullPath: '/discover'
      preLoaderRoute: typeof DiscoverRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/calendar': {
      id: '/calendar'
      path: '/calendar'
      fullPath: '/calendar'
      preLoaderRoute: typeof CalendarRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/trends/': {
      id: '/trends/'
      path: '/trends'
      fullPath: '/trends'
      preLoaderRoute: typeof TrendsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/': {
      id: '/settings/'
      path: '/'
      fullPath: '/settings/'
      preLoaderRoute: typeof SettingsIndexRouteImport
      parentRoute: typeof SettingsRoute
    }
    '/outfits/': {
      id: '/outfits/'
      path: '/'
      fullPath: '/outfits/'
      preLoaderRoute: typeof OutfitsIndexRouteImport
      parentRoute: typeof OutfitsRoute
    }
    '/trends/$trendId': {
      id: '/trends/$trendId'
      path: '/trends/$trendId'
      fullPath: '/trends/$trendId'
      preLoaderRoute: typeof TrendsTrendIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/privacy': {
      id: '/settings/privacy'
      path: '/privacy'
      fullPath: '/settings/privacy'
      preLoaderRoute: typeof SettingsPrivacyRouteImport
      parentRoute: typeof SettingsRoute
    }
    '/settings/notifications': {
      id: '/settings/notifications'
      path: '/notifications'
      fullPath: '/settings/notifications'
      preLoaderRoute: typeof SettingsNotificationsRouteImport
      parentRoute: typeof SettingsRoute
    }
    '/settings/data': {
      id: '/settings/data'
      path: '/data'
      fullPath: '/settings/data'
      preLoaderRoute: typeof SettingsDataRouteImport
      parentRoute: typeof SettingsRoute
    }
    '/settings/about': {
      id: '/settings/about'
      path: '/about'
      fullPath: '/settings/about'
      preLoaderRoute: typeof SettingsAboutRouteImport
      parentRoute: typeof SettingsRoute
    }
    '/profiles/new': {
      id: '/profiles/new'
      path: '/profiles/new'
      fullPath: '/profiles/new'
      preLoaderRoute: typeof ProfilesNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/outfits/new': {
      id: '/outfits/new'
      path: '/new'
      fullPath: '/outfits/new'
      preLoaderRoute: typeof OutfitsNewRouteImport
      parentRoute: typeof OutfitsRoute
    }
    '/outfits/$outfitId': {
      id: '/outfits/$outfitId'
      path: '/$outfitId'
      fullPath: '/outfits/$outfitId'
      preLoaderRoute: typeof OutfitsOutfitIdRouteImport
      parentRoute: typeof OutfitsRoute
    }
    '/items/new': {
      id: '/items/new'
      path: '/items/new'
      fullPath: '/items/new'
      preLoaderRoute: typeof ItemsNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/items/$itemId': {
      id: '/items/$itemId'
      path: '/items/$itemId'
      fullPath: '/items/$itemId'
      preLoaderRoute: typeof ItemsItemIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/guides/$guideId': {
      id: '/guides/$guideId'
      path: '/guides/$guideId'
      fullPath: '/guides/$guideId'
      preLoaderRoute: typeof GuidesGuideIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/articles/$articleId': {
      id: '/articles/$articleId'
      path: '/articles/$articleId'
      fullPath: '/articles/$articleId'
      preLoaderRoute: typeof ArticlesArticleIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/outfits/$outfitId_/edit': {
      id: '/outfits/$outfitId_/edit'
      path: '/$outfitId/edit'
      fullPath: '/outfits/$outfitId/edit'
      preLoaderRoute: typeof OutfitsOutfitIdEditRouteImport
      parentRoute: typeof OutfitsRoute
    }
  }
}

interface OutfitsRouteChildren {
  OutfitsOutfitIdRoute: typeof OutfitsOutfitIdRoute
  OutfitsNewRoute: typeof OutfitsNewRoute
  OutfitsIndexRoute: typeof OutfitsIndexRoute
  OutfitsOutfitIdEditRoute: typeof OutfitsOutfitIdEditRoute
}

const OutfitsRouteChildren: OutfitsRouteChildren = {
  OutfitsOutfitIdRoute: OutfitsOutfitIdRoute,
  OutfitsNewRoute: OutfitsNewRoute,
  OutfitsIndexRoute: OutfitsIndexRoute,
  OutfitsOutfitIdEditRoute: OutfitsOutfitIdEditRoute,
}

const OutfitsRouteWithChildren =
  OutfitsRoute._addFileChildren(OutfitsRouteChildren)

interface SettingsRouteChildren {
  SettingsAboutRoute: typeof SettingsAboutRoute
  SettingsDataRoute: typeof SettingsDataRoute
  SettingsNotificationsRoute: typeof SettingsNotificationsRoute
  SettingsPrivacyRoute: typeof SettingsPrivacyRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
}

const SettingsRouteChildren: SettingsRouteChildren = {
  SettingsAboutRoute: SettingsAboutRoute,
  SettingsDataRoute: SettingsDataRoute,
  SettingsNotificationsRoute: SettingsNotificationsRoute,
  SettingsPrivacyRoute: SettingsPrivacyRoute,
  SettingsIndexRoute: SettingsIndexRoute,
}

const SettingsRouteWithChildren = SettingsRoute._addFileChildren(
  SettingsRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CalendarRoute: CalendarRoute,
  DiscoverRoute: DiscoverRoute,
  NotificationsRoute: NotificationsRoute,
  OutfitsRoute: OutfitsRouteWithChildren,
  ProfileRoute: ProfileRoute,
  SettingsRoute: SettingsRouteWithChildren,
  WardrobeRoute: WardrobeRoute,
  ArticlesArticleIdRoute: ArticlesArticleIdRoute,
  GuidesGuideIdRoute: GuidesGuideIdRoute,
  ItemsItemIdRoute: ItemsItemIdRoute,
  ItemsNewRoute: ItemsNewRoute,
  ProfilesNewRoute: ProfilesNewRoute,
  TrendsTrendIdRoute: TrendsTrendIdRoute,
  TrendsIndexRoute: TrendsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
